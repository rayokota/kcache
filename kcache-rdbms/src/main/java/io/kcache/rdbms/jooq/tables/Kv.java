/*
 * This file is generated by jOOQ.
 */
package io.kcache.rdbms.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import io.kcache.rdbms.jooq.Kcache;
import io.kcache.rdbms.jooq.Keys;
import io.kcache.rdbms.jooq.tables.records.KvRecord;
import org.jooq.util.derby.DerbyDataType;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Kv extends TableImpl<KvRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>kcache.KV</code>
     */
    public static final Kv KV = new Kv();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KvRecord> getRecordType() {
        return KvRecord.class;
    }

    /**
     * The column <code>kcache.KV.kv_key</code>.
     */
    //public final TableField<KvRecord, byte[]> KV_KEY = createField(DSL.name("kv_key"), SQLDataType.VARBINARY(3072).nullable(false), this, "");
    public final TableField<KvRecord, byte[]> KV_KEY = createField(DSL.name("kv_key"), DerbyDataType.CHARVARYINGFORBITDATA.nullable(false), this, "");

    /**
     * The column <code>kcache.KV.kv_value</code>.
     */
    //public final TableField<KvRecord, byte[]> KV_VALUE = createField(DSL.name("kv_value"), SQLDataType.VARBINARY(32672).nullable(false), this, "");
    public final TableField<KvRecord, byte[]> KV_VALUE = createField(DSL.name("kv_value"), DerbyDataType.CHARVARYINGFORBITDATA.nullable(false), this, "");

    private Kv(Name alias, Table<KvRecord> aliased) {
        this(alias, aliased, null);
    }

    private Kv(Name alias, Table<KvRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>kcache.KV</code> table reference
     */
    public Kv(String alias) {
        this(DSL.name(alias), KV);
    }

    /**
     * Create an aliased <code>kcache.KV</code> table reference
     */
    public Kv(Name alias) {
        this(alias, KV);
    }

    /**
     * Create a <code>kcache.KV</code> table reference
     */
    public Kv() {
        this(DSL.name("kv"), null);
    }

    public <O extends Record> Kv(Table<O> child, ForeignKey<O, KvRecord> key) {
        super(child, key, KV);
    }

    @Override
    public Schema getSchema() {
        return Kcache.KCACHE;
    }

    @Override
    public UniqueKey<KvRecord> getPrimaryKey() {
        return Keys.KEY_KV_PRIMARY;
    }

    @Override
    public List<UniqueKey<KvRecord>> getKeys() {
        return Arrays.<UniqueKey<KvRecord>>asList(Keys.KEY_KV_PRIMARY);
    }

    @Override
    public Kv as(String alias) {
        return new Kv(DSL.name(alias), this);
    }

    @Override
    public Kv as(Name alias) {
        return new Kv(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Kv rename(String name) {
        return new Kv(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Kv rename(Name name) {
        return new Kv(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<byte[], byte[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
