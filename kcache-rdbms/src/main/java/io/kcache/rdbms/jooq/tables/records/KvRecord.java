/*
 * This file is generated by jOOQ.
 */
package io.kcache.rdbms.jooq.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;

import io.kcache.rdbms.jooq.tables.Kv;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KvRecord extends UpdatableRecordImpl<KvRecord> implements Record2<byte[], byte[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>kcache.KV.kv_key</code>.
     */
    public void setKvKey(byte[] value) {
        set(0, value);
    }

    /**
     * Getter for <code>kcache.KV.kv_key</code>.
     */
    public byte[] getKvKey() {
        return (byte[]) get(0);
    }

    /**
     * Setter for <code>kcache.KV.kv_value</code>.
     */
    public void setKvValue(byte[] value) {
        set(1, value);
    }

    /**
     * Getter for <code>kcache.KV.kv_value</code>.
     */
    public byte[] getKvValue() {
        return (byte[]) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<byte[]> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<byte[], byte[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<byte[], byte[]> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<byte[]> field1() {
        return Kv.KV.KV_KEY;
    }

    @Override
    public Field<byte[]> field2() {
        return Kv.KV.KV_VALUE;
    }

    @Override
    public byte[] component1() {
        return getKvKey();
    }

    @Override
    public byte[] component2() {
        return getKvValue();
    }

    @Override
    public byte[] value1() {
        return getKvKey();
    }

    @Override
    public byte[] value2() {
        return getKvValue();
    }

    @Override
    public KvRecord value1(byte[] value) {
        setKvKey(value);
        return this;
    }

    @Override
    public KvRecord value2(byte[] value) {
        setKvValue(value);
        return this;
    }

    @Override
    public KvRecord values(byte[] value1, byte[] value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached KvRecord
     */
    public KvRecord() {
        super(Kv.KV);
    }

    /**
     * Create a detached, initialised KvRecord
     */
    public KvRecord(byte[] kvKey, byte[] kvValue) {
        super(Kv.KV);

        setKvKey(kvKey);
        setKvValue(kvValue);
    }
}
